from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader
from django.http import JsonResponse

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
from io import BytesIO
import base64

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ocr
from PIL import Image , ImageEnhance, ImageFilter
import pytesseract


# Computer Vision , OpenCV
import numpy as np
import matplotlib.pyplot as plt
import cv2

 
# MongoDB
from pymongo import MongoClient
import pymongo

# For Upload File
from django.shortcuts import render
from django.http import HttpResponse, JsonResponse
from django.core.files.storage import FileSystemStorage
import os
import fitz
 

# ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
import re

# ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ String ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏µ‡πà‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô ,  using SequenceMatcher.ratio()
from difflib import SequenceMatcher 

# ‡πÉ‡∏ä‡πâ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON string ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å JsonResponse
import json

# ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà pip install reportlab ‡πÄ‡∏õ‡πá‡∏ô library ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF --> ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô ‚Å°‚Å¢‚Å¢‚Å£createImageTable‚Å° ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á pdf ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏â‡∏¢‡πÜ
import shutil

# ‡πÉ‡∏ä‡πâ‡∏≠‡πà‡∏≤‡∏ô Excel
from django.shortcuts import render
import pandas as pd
from django.http import JsonResponse



from django.http import FileResponse
from django.shortcuts import get_object_or_404




# üå∫ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞ return ‡πÑ‡∏£‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ HttpResponse


# conn_str = "mongodb+srv://kataroja1:<Yourpassword>@cluster0.0yrfv3l.mongodb.net/?retryWrites=true&w=majority"
conn_str = "mongodb+srv://kataroja1:kataroja7899@cluster0.0yrfv3l.mongodb.net/?retryWrites=true&w=majority"



def testCardCheck(request):
    print("testCardCheck")
    return HttpResponse("Hello world!")

def cardCheck(request):
    # template = loader.get_template('HomePage.html')
    # return HttpResponse(template.render())
    return HttpResponse("Hello world!")


def HomeFirst(request):
    print("Start HomePage.html üì¶üì¶");
    return HttpResponse("Hello world!")


# ‚Å°‚Å£‚Å£‚Å¢---- ùó†ùóÆùó∂ùóª ùóõùó≤ùóøùó≤‚Å° ----
def MainPage(request): # http://127.0.0.1:8000/MainPage/
    print("Start HomePage.html üì¶üì¶")

    # ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Å method check_text
    # check_text("../assets/img-1.png") # path ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Å image ‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô github

    #? ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô  clearRecord ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    # clearRecord()


    # ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ testImage ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å ‡∏ß‡∏¥‡∏î‡∏¥‡πÇ‡∏≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏â‡∏¢‡πÜ
    # check_text('../assets/testImage.png')


    # check_text("../../assets/test03gray.jpg") # path ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Å image ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏∂‡πâ‡∏ô githup , ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ô‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏ß‡∏Å ‡∏õ‡∏ä‡∏ä. 
    # check_text_Thai_Language("../../assets/test03gray.jpg")   # ‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πà‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢


    return render(request, 'MainPage.html', {})


# ‚Å°‚Å£‚Å¢‚Å£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‚Å°
def createImageTable(request):
    #  ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞ ‡∏≠‡πà‡∏≤‡∏ô ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ
    
    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)
    myDb = client["pymongo_demo"]
    myCollection = myDb["demo_collection"]
    

    # ‡πÉ‡∏ô‡∏†‡∏≤‡∏û (image_a4) ‡∏°‡∏µ 31 ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Æ‡πä‡∏≤‡∏ü‡∏ü‡∏π‡πä‡∏ß‡∏ß‡∏ß‡∏ß
    record_count = myCollection.count_documents({})
    

    #! Reading all field
    cursor = myCollection.find()

    
    image_toPDF = [] # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô pdf

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î=33 ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 31 ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ --> 33 / 31 = 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏£‡∏ß‡∏° 0 ‡πÉ‡∏ô for loop ‡∏î‡πâ‡∏ß‡∏¢ ‡∏Å‡πá‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤ ‡∏™‡∏≠‡∏á ‡∏£‡∏≠‡∏ö
    for i in range(0, record_count // 31 + 1):
        print("üê∞‡æÄüêª‡Ω≤‡æÄ ", i , record_count)

        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© A4 (210 x 297 ‡∏°‡∏°.)
        # a4_width, a4_height = 210, 297
        a4_width, a4_height = 700, 800


        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏Ç‡∏ô‡∏≤‡∏î A4
        image_a4 = np.ones((a4_height, a4_width, 3), dtype=np.uint8) * 255

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á #! ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ß‡∏Å‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏£‡∏≤‡πÉ‡∏™‡πà‡∏°‡∏∑‡∏≠‡πÑ‡∏õ 
        num_rows = 31
        num_cols = 4
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ num_rows = 20 and num_cols = 4  ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ==>  cell_width_distance = 52  , cell_height_distance = 14
        cell_width_distance = image_a4.shape[1] // num_cols + 8 # .shape[1] = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        cell_height_distance = image_a4.shape[0] // num_rows # .shape[0] = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        # image_a4.shape[1] = 210 , image_a4.shape[0] = 297
        
        title = ["id_number", "firstname" , "surname", "attendance"]
        for col in range(num_cols):
            x = col * cell_width_distance
            # print("col : ", col , "cell_width_distance : ", cell_width_distance , "x üçúüçú: " , x)
            # col :  0 cell_width_distance :  52 x üçúüçú:  0  
            # col :  1 cell_width_distance :  52 x üçúüçú:  52 #*‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°  x ‡∏à‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 52 or cell_width_distance
            cv2.line(image_a4, (x, 0), (x, image_a4.shape[0]), (0, 0, 0), 1)

            
            #? ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            cv2.putText(image_a4, title[col], (x + 5, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
        for row in range(num_rows + 1):
            y = row * cell_height_distance # ‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö cell_height_distance ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ‡∏™‡∏≤‡∏° ‡∏Å‡πá‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç 3 ‡πÑ‡∏õ‡∏Ñ‡∏π‡∏ì ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏î‡πâ ‡πÅ‡∏ñ‡∏ß‡∏™‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
            # print("row : ", row , "cell_height_distance : ", cell_height_distance , "y ü™Åü™Å: " , y)
            # row :  0 cell_height_distance :  14 y ü™Åü™Å:  0
            # row :  1 cell_height_distance :  14 y ü™Åü™Å:  14
            cv2.line(image_a4, (0, y), (image_a4.shape[1], y), (0, 0, 0), 1)

            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß
            # range(start, stop) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô range(num_cols + 1) ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á start‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏Ñ‡πà stop ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            if(row != 0): #‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏à‡∏∞‡πÉ‡∏™‡πà‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
                # for col in range(num_cols): # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏° = 4 
                #     x = col * cell_width_distance 
                    
                try:
                    record = cursor.next() # record {'_id': ObjectId('65f3821a6db989ce8e93d03c'), 'id_number': 64070004, 'student_fistName': 'BlissfulWords', 'student_surName': 'Zenhaven', 'attendance_status': 0}
                    record_id_number = str(record['id_number']) # ‡πÉ‡∏™‡πà string ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô cv2.putText ‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà string
                    record_student_fistName = record['student_fistName']
                    record_student_surName = record['student_surName']
                    record_attendance_status = record['attendance_status']
                    print("üåäüåä " , record_id_number)
                

                    # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û
                    cv2.putText(image_a4, record_id_number, (0+10, y+cell_height_distance-3), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 1, ) #* ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà (x,y) = (0, y+15) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏•‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å y = y +15 ‡∏™‡πà‡∏ß‡∏ô x = 0 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
                    cv2.putText(image_a4, record_student_fistName, (cell_width_distance+10, y+cell_height_distance-3), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1,)
                    cv2.putText(image_a4, record_student_surName, (cell_width_distance*2+10, y+cell_height_distance-3), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1, )
                    #TODO cv2.putText(image_a4, record_attendance_status, (cell_width_distance*3+10, y+cell_height_distance+1), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1, )
                    if(record_attendance_status == 0): # 0 = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö , 1 = ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö   #? ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á = 15 , ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á = 10
                        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó - ‡∏Ç‡∏≤‡∏î‡∏™‡∏≠‡∏ö ‚ùå
                        cv2.line(image_a4, (cell_width_distance*3+10,  y+cell_height_distance-5), (cell_width_distance*3+20, y+cell_height_distance-15), (0, 0, 255), 1, cv2.LINE_AA) 
                        cv2.line(image_a4, (cell_width_distance*3+10,  y+cell_height_distance-15), (cell_width_distance*3+20, y+cell_height_distance-5), (0, 0, 255), 1, cv2.LINE_AA)
                    else:
                        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö ‚úÖ
                        cv2.line(image_a4, (cell_width_distance*3+10,  y+cell_height_distance-5), (cell_width_distance*3+20, y+cell_height_distance-15), (0, 255, 0), 1, cv2.LINE_AA)
                        cv2.line(image_a4, (cell_width_distance*3+10,  y+cell_height_distance-5), (cell_width_distance*3+7, y+cell_height_distance-8), (0, 255, 0), 1, cv2.LINE_AA)
                except StopIteration:
                    # ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ , StopIteration ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Cursor ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                    break
    
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© A4
        # scaled_image = cv2.resize(image_a4, (800, 900))  # 800 x 1131 ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        scaled_image = cv2.resize(image_a4, (a4_width, a4_height))  # 800 x 1131 ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
        cv2.imshow('A4 Size Image', scaled_image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

        
        # ‡∏î‡∏∂‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        current_directory = os.getcwd()
        new_directory = 'media' # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        full_path = os.path.join(current_directory, new_directory) # ‡∏£‡∏ß‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        image_filename = f'image_{i}.png' # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        new_image_path = os.path.join(full_path, image_filename) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        os.makedirs(full_path, exist_ok=True) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        cv2.imwrite(new_image_path, scaled_image)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
        image_toPDF.append(new_image_path)





    
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
        pdf_filename = 'myListStudent.pdf'
        add_image_to_pdf(pdf_filename, image_toPDF)



        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå PDF ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå listStudent
        output_pdf_path = os.path.join('media', pdf_filename)
        shutil.move(pdf_filename, output_pdf_path)


        full_path = os.path.join(current_directory, "media")
        directory_PDF_ListStudent = os.path.join(full_path, "myListStudent.pdf") # C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\listStudent\myListStudent.pdf


        


        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        pdf_link = directory_PDF_ListStudent  # ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ==>  C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\listStudent\myListStudent.pdf
        image_links = image_toPDF  # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ==> ['C:\\Users\\User\\Documents\\Git_ComVi\\CardCheck\\my_tennis_club\\media\\image_0.png', 'C:\\Users\\User\\Documents\\Git_ComVi\\CardCheck\\my_tennis_club\\media\\image_1.png']
        print("üß∏üß∏ " , pdf_link)


    # ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON response ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà frontend
    response_data = {
        'pdf_link': pdf_link,
        'image_links': image_links, 
    }

    return JsonResponse(response_data)



#! ùó†ùóºùóªùó¥ùóº ùóßùó∂ùóΩ ùóõùó≤ùóøùó≤!!!!!!
def MongoConnect(request):
    # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Mongo ‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á ‡∏≠‡πà‡∏≤‡∏ô ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï ‡∏•‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ query üíê

    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)


    # Create a DB
    myDb = client["pymongo_demo"]
    # Create a collection
    myCollection = myDb["demo_collection"]
    print(client.list_database_names())

    #‚Å°‚Å¢‚Å¢‚Å£ ‚Å°‚Å¢‚Å¢‚Å£ùó†ùòÜ ùó±ùóÆùòÅùóÆùóØùóÆùòÄùó≤‚Å°‚Å°‚Å°
    # student_number = {
    #     "id_number" : number_part, # ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    #     "student_fistName": first_part,
    #     "student_surName" : second_part,
    #     "attendance_status" : 0, # 0 ‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö , 1 = ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    # }


    #!TODO Create a document / record
    # myDoc = {
    #     "name" : "Hello",
    #     "message": "This is pymongo demo"
    # }
    # # Insert the document
    # res = myCollection.insert_one(myDoc)
    # print(res.inserted_id)


    #! Reading the document ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà rocord ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    # record = myCollection.find_one()
    # print(record) # {'_id': ObjectId('65d36d1794d78286f54ccfcb'), 'name': 'Hello', 'message': 'This is pymongo demo'}

    #! Reading the document ‡∏≠‡πà‡∏≤‡∏ô all record
    # cursor = myCollection.find()
    # for record in cursor:
    #     print(record)

    #! Reading but Query by student_fistName
    # record = myCollection.find_one({"student_fistName": firstName}) 
    # print(record) # => {'_id': ObjectId('65d4ca7f93805c855c82da41'), 'id_number': '64070257', 'student_fistName': 'Intummadee', 'student_surName': 'Carbon', 'attendance_status': 0}

    #! Reading one Field
    # record_firstName = myCollection.find({}, {"student_fistName": 1})
    #     for record in record_firstName:
    #         print(record.get("student_fistName"))
    
    
    # ‚Å°‚Å£‚Å£‚Å¢#! Count ‚Å°
    # record_count = myCollection.count_documents({})
    # print(record_count)




    #? Updating the record 
    # query = {
    #     "message":"This is pymongo demo"
    # }
    # new_val = {
    #     "$set": {"message":"Welcome to coding 101 with Steve"}
    # }
    # new_record = myCollection.update_one(query, new_val)
    # record = myCollection.find_one()
    # print(record) # {'_id': ObjectId('65d36d1794d78286f54ccfcb'), 'name': 'Hello', 'message': 'Welcome to coding 101 with Steve'}

    #? Update but query by student_fistName and set new value especially attendance_status
    # new_record = myCollection.update_one({"student_fistName": firstName}, {"$set": {"attendance_status": 1}})

    #* Step 9: Delete the Record
    # query_del = {
    #     "name": "Hello"
    # }
    # record_del = myCollection.delete_one(query_del)
    # #Reading the document after updating
    # record = myCollection.find_one()
    # print(record)

    #* Delete all record
    # result = myCollection.delete_many({})


    return ""

#* ùó£ùóóùóô
def upload_and_convert_pdf(request):
    print("‡πÄ‡∏Ç‡πâ‡∏≤ upload_and_convert_pdf")
    if request.method == 'POST' and request.FILES['pdf_file']: # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
        # Handle the uploaded PDF file
        uploaded_file = request.FILES['pdf_file'] #  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤.
        fs = FileSystemStorage() # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå FileSystemStorage ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Django.
        pdf_filename = fs.save(uploaded_file.name, uploaded_file) # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Django ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å.
        # print(pdf_filename) => resume.pdf

        # Convert PDF to images 
        #  fs.location ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô settings.py ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÅ‡∏õ‡∏£‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ MEDIA_ROOT ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ fs.location ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ
        pdf_path = os.path.join(fs.location, pdf_filename) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF.
        # print("pdf_path = " + pdf_path) => C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\media\test2.pdf ‡πÄ‡∏£‡∏≤‡πÉ‡∏™‡πà pdf ‡∏ä‡∏∑‡πà‡∏≠ test2.pdf ‡∏°‡∏≤
        image_paths = convert_pdf_to_images(pdf_path) # ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û.
        # print(image_paths) =>  ['page_1.png', 'page_2.png'] pdf‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ path‡∏Å‡πá‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡πÅ‡∏Ñ‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å
        
        try:
            client = pymongo.MongoClient(conn_str)
            print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
        except Exception:
            print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)

        myDb = client["pymongo_demo"]
        myCollection = myDb["demo_collection"]

        # Save the first image as a PNG file
        if image_paths:


            first_page_image_path = image_paths[0]
            png_path = os.path.join(fs.location, 'output.png') 
            save_image_as_png(first_page_image_path, png_path)
            # check_text(first_page_image_path)

            page_png_path_url = [] # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö path ‡∏Ç‡∏≠‡∏á image ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á frontend ‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á frontend ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤ pdf 

            for i, page_image_path in enumerate(image_paths):
                # print(page_image_path) # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ ‡πÑ‡∏ü‡∏•‡∏∫ image ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ  , .pdf ‡∏°‡∏µ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏∞ print ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏™‡∏≠‡∏á‡∏£‡∏≠‡∏ö  page_1.png ‡πÅ‡∏•‡∏∞  page_2.png
                page_png_path = os.path.join(fs.location, f'page_{i + 1}.png')
                # page_png_path = print path ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡∏™‡∏≠‡∏á‡∏£‡∏≠‡∏ö ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .pdf ‡πÄ‡∏ä‡πà‡∏ô C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\media\page_2.png  ‡πÅ‡∏•‡∏∞   C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\media\page_1.png
                save_image_as_png(page_image_path, page_png_path) # ‡∏ñ‡πâ‡∏≤ pdf ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ ‡∏Å‡πá‡∏°‡∏≤‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° pdf ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ üöÄ

                page_png_path_url.append(fs.url(page_image_path))

                #* ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ä‡πá‡∏Å text ‡πÅ‡∏•‡πâ‡∏ß
                text = check_text(page_png_path)
        


                print(text)
                #!! ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏™‡πà‡∏á ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
                lines = text.splitlines()
                for line in lines:
                    parts = line.split(' ', 1)
                    if len(parts) == 2:
                        number_part, text_part = parts
                        text_part = text_part.replace('-', '').replace('=', '').strip() 
                        subparts = text_part.split(' ', 1)
                        if len(subparts) == 2:
                            first_part, second_part = subparts
                            if '‚Äî' in second_part: # ‡πÅ‡∏Å‡πâ‡∏™‡πà‡∏ß‡∏ô second ‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ => 64070001 ‡∏ä‡∏∑‡πà‡∏≠ =  HarmonyHub ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• =  ‚Äî Tranquilwood (‡πÉ‡∏ô‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô second_part ‡∏°‡∏µ ‚Äî ‡∏ï‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏•‡∏¢‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å)
                                second_part = second_part.split('‚Äî', 1)[1].strip()
                            print(number_part, "‡∏ä‡∏∑‡πà‡∏≠ = ", first_part, "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• = ", second_part)
                    student_number = {
                        "id_number" : number_part, # ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
                        "student_fistName": first_part,
                        "student_surName" : second_part,
                        "attendance_status" : 0, # 0 ‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö , 1 = ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                    }
                
                    #TODO Insert the document
                    # res = myCollection.insert_one(student_number)
                    # print(res.inserted_id)

                    # print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏®.‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• => " , student_number) ==> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏®.‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =>  {'id_number': '64070254', 'student_fistName': 'Anchisa', 'student_surName': 'Cherdsattayanukul', 'attendance_status': 0}
                    # print(student_number)


            return JsonResponse({'page_png_path_url': page_png_path_url}) # page_png_path_url = [ /media/page_1.png ,  /media/page_2.png ]
        return JsonResponse({'error': 'Invalid request'}, status=400)

def convert_pdf_to_images(pdf_path):
    images = []
    doc = fitz.open(pdf_path)
    
    for page_number in range(doc.page_count):
        page = doc[page_number]
        pix = page.get_pixmap()
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        img_path = f'page_{page_number + 1}.png'
        img.save(img_path)
        images.append(img_path)
    
    return images

def save_image_as_png(source_path, destination_path):
    img = Image.open(source_path)
    img.save(destination_path, 'PNG')


#* ‡∏†‡∏≤‡∏û ùóúùó∫ùóÆùó¥ùó≤
def upload_image(request):
    # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Load Image ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ path ‡∏ô‡∏µ‡πâ

    # try:
    #     client = pymongo.MongoClient(conn_str)
    #     print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    # except Exception:
    #     print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)
    # myDb = client["pymongo_demo"]
    # myCollection = myDb["demo_collection"]
    # print(client.list_database_names())
    # record_count = myCollection.count_documents({})
    # print(record_count)   
    record_count = 1;

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0 ‡∏Ñ‡∏∑‡∏≠ ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏î‡πÜ ‡∏ã‡∏∂‡πà‡∏á ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ
    # if record_count == 0:
    #     return JsonResponse({'errorPDF': True})

    if request.method == 'POST' and request.FILES.get('image_file'):
        uploaded_image = request.FILES['image_file']
        fs = FileSystemStorage()
        image_filename = fs.save(uploaded_image.name, uploaded_image)
        print(image_filename) # ==> Database.png ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        image_path = os.path.join(fs.location, image_filename) 
        print("image_path = " + image_path) # => C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\media\74b05-16299573593572-800.avif
        if image_path:
            saveImage_path = os.path.join(fs.location, 'outputImage.png') 
            save_image_as_png(image_path, saveImage_path)
            print("saveImage_path = " + saveImage_path)
            print(cv2.imread(saveImage_path))
            text = check_text(saveImage_path) # ‡πÄ‡∏ä‡πá‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            saveImage_url = fs.url('outputImage.png')  # ‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô outputImage.png

            #‚Å°‚Å£‚Å¢‚Å£TODO ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á ùóΩùó±ùó≥ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ùóΩùó±ùó≥ ‡∏à‡∏∞‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡πà ùó∂ùó∫ùóÆùó¥ùó≤ ‡πÑ‡∏°‡πà‡∏°‡∏µ‚Å°
            # -‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÅ‡∏Å‡πâ VideoCapture ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ 
            
            text = is_person_name(text)
            response_data = text.content.decode('utf-8')  # ‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô string
            data_dict = json.loads(response_data)  # ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô Python dictionary
            # JsonResponse({'notSureIs': check_again[1], 'firstName': firstName , 'surName' : surname})

            

            #  ‡ºò‚ãÜüå∑ü´ßüê±üêæüíó ‚ãÜÀô 
            if data_dict.get("notSureIs") == "Imsure": # ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏°‡∏≤‡∏Å
                chageStatusAttendance(data_dict.get("firstName") , data_dict.get("surName") , True) # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö
                return JsonResponse({'saveImage_url': saveImage_url, 'firstName': data_dict.get("firstName"), 'surName': data_dict.get("surName")})
            elif data_dict.get("notSureIs") == "takeNewPhoto": # takeNewPhoto ‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
                return JsonResponse({'saveImage_url': saveImage_url, 'newPhoto' : True})
            else: # ‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏∂‡∏á 
                chageStatusAttendance(data_dict.get("firstName") , data_dict.get("surName") , True) # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö
                return JsonResponse({'saveImage_url': saveImage_url, 'firstName': data_dict.get("firstName"), 'surName': data_dict.get("surName")})


    

            
        return JsonResponse({'error': 'Invalid request'}, status=400)

def check_text(image_path):
    print("Check ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ English üåèüåèüåèüåè")
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
    #  image_path = C:\Users\User\Documents\‡∏õ‡∏µ3\GIT_CardCheck\CardCheck\my_tennis_club\media\outputImage.png
    
    image = cv2.imread(image_path)
    print("image in check text : ", image)
    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ pytesseract ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ OCR

    if image is not None:
        # path ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ ‡∏ó‡∏î‡∏•‡∏≠‡∏á
        #! cv2.imwrite('../assets/testImage_Here.png', img)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô Grayscale ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ pytesseract.
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (3,3), 0)
        thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

        # cv2.imshow('book_in_scene_homography', blur)
        # cv2.waitKey(0)
        # cv2.destroyAllWindows()

        # cv2.imshow('book_in_scene_homography', thresh)
        # cv2.waitKey(0)
        # cv2.destroyAllWindows()

        # Perform text extraction
        data = ""
        print("‡πÄ‡∏ó‡∏™‡πÜ‡πÜ‡πÜ")
        print(pytesseract.image_to_string(thresh, lang='eng'))
        # print(data)
        print("------------ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Å ------------")    

    return data

def check_text_Thai_Language(image_path):
    print("Check ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Thailand üáπüá≠ üáπüá≠ ‚ãÜÔΩ°Àö ‚úàÔ∏é ‚úàÔ∏è ‚ãÜ")
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
    image = cv2.imread(image_path)
    # print(image)
    if image is not None:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (3,3), 0)
        thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

        # Perform text extraction
        text = pytesseract.image_to_string(thresh, lang='tha')  #Specify language to look after!
        # --psm 6 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á Sparse text. Tesseract ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏ö ‡πÜ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        print(text)

    return text

def checkStudentCome(text):
    # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô check_text
    # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà user ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ‡∏°‡∏≤ ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤ ‡∏Å‡∏£‡∏≠‡∏á ‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏®.‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô MongoDB ‡∏ß‡πà‡∏≤ ‡∏ô‡∏®. ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß

    print(" ---- uploadMongoDB ‚õ±Ô∏è‚õ±Ô∏è‚õ±Ô∏è ---- ")
    
    lines = text.splitlines()
    # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 6
    if len(lines) >= 7:
        line_6_words = lines[5].split()  # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 6 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠
        line_7_words = lines[6].split()  # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 7 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
        if line_6_words:
            firstName = line_6_words[-1]
            print("‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ ‚Ä¢·¥ó‚Ä¢ :", firstName) # Intummadee
        if line_7_words:
            surName = line_7_words[-1]
            print("‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ (> <) :", surName) # Maliyam


    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)

    myDb = client["pymongo_demo"]
    myCollection = myDb["demo_collection"]
    
    #? Updating the record 
    new_record = myCollection.update_one({"student_fistName": firstName}, {"$set": {"attendance_status": 1}})
    record = myCollection.find_one({"student_fistName": firstName})
    print("üçèüçè record ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
    print(record) # {'_id': ObjectId('65d36d1794d78286f54ccfcb'), 'name': 'Hello', 'message': 'Welcome to coding 101 with Steve'}

 


    return ""





# ‚Å°‚Å£‚Å¢‚Å£‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Å ‚Å°
def is_person_name(text):
    # ‡∏ü‡∏±‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    print("üêØ ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô üêØ")

    
    # ‡πÉ‡∏ä‡πâ Regular Expression ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥ ‡∏à‡∏≤‡∏Å text ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô  <class 'str'> ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô <class 'list'>
    words = re.findall(r'\b\w+\b', text)
    print("words : ", words)


    filter_words = []
    for word in words:
        if word == "Date":
            break
        filter_words.append(word)
    
    print("filter_words : ",filter_words)
    words = filter_words 
            

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    spilt_word_toFind_Name = []
     

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    for word in words:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        if word.istitle():  # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
            spilt_word_toFind_Name.append(word)
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
        if word.isupper():  # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
            spilt_word_toFind_Name.append(word)
    

    maybe_real_firstNameAndsurName = [] # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏ó‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Name Miss Lastname ‡∏™‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏°‡∏≤‡∏Å ‡∏ß‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏° #? Miss , Lastname ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö ‡∏Ñ‡∏≥‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ‡πÉ‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏ä‡∏ä. ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ Miss ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á miss ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠
    for i in range(len(words) - 1):  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Index Error, ‡∏•‡∏π‡∏õ‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        if words[i] in ["Miss", "Lastname"]:
            maybe_real_firstNameAndsurName.append(words[i + 1])
                

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏° #? Name , Last  
    for i in range(len(words) - 1):  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Index Error, ‡∏•‡∏π‡∏õ‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        if words[i] in ["Name", "Last"]:
            maybe_real_firstNameAndsurName.append(words[i + 2])
             
     
    print("üé¥üé¥ => ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏≠‡∏≠‡∏Å ", spilt_word_toFind_Name) # ['Thai', 'National', 'ID', 'Card', 'Identification', 'Number', 'Qua', 'Name', 'Miss', 'Sirlkorn', 'Lastname', 'Na', 'Ubon', 'NLA']
  
    #  ‡∏•‡∏ö ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
    deleteAlpha_words = [word for word in words if len(word) > 1 or word.isalpha()]
    print(deleteAlpha_words) # ['9192410919914', 'Thai', 'National', 'ID', 'Card', 'amkrtwakemu', '2097', '02090', '36', 'Identification', 'Number', 'damauasfeana', 'a', 'asnd', 'Qua', 'Name', 'Miss', 'Sirlkorn', 'Lastname', 'Na', 'Ubon', 'iaiuf', '30', 'NLA', '2546']


    new_spilt_word_toFind_Name = [] # ['Identificatien', 'Nurabes', 'BUNNA', 'Name', 'Miss', 'Lastname', 'Maliyam', 'Bate', 'Riri', 'Nov', 'Nov', 'Tad', 'TBAB', 'Pave', 'Expery', 'intummadee', 'Maliyam', 'intummadee']
    for word in spilt_word_toFind_Name:
        if len(word) > 2 and word not in ["Miss", "Name", "Last" , "Lastname", "Identificatien" , "National", "Card", "Thai", "Number" , "Identification"]:
            new_spilt_word_toFind_Name.append(word)
        
    print("üèÄ")
    print(new_spilt_word_toFind_Name) # ['Sogn', 'TET', 'Sanleehaher', 'Thel', 'Numbor', 'Intummadee', 'Maliyam']


    #! ‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)
     
    myDb = client["pymongo_demo"]
    myCollection = myDb["demo_collection"]




    #! Reading but Query by student_fistName
    # record = myCollection.find_one({"student_fistName": firstName}) 
    # print(record) # => {'_id': ObjectId('65d4ca7f93805c855c82da41'), 'id_number': '64070257', 'student_fistName': 'Intummadee', 'student_surName': 'Carbon', 'attendance_status': 0}

    firstName = ""
    surName = ""
    #! Reading the document ‡∏≠‡πà‡∏≤‡∏ô all record
    
    print("---- ‡ºò‚ãÜüå∑ü´ßüí≠‚ÇäÀö‡∑Ü ----")
    cursor = myCollection.find()
    for record in cursor:
        for word in new_spilt_word_toFind_Name: # ['ùó§ùòÇùóÆ', 'ùó¶ùó∂ùóøùóπùó∏ùóºùóøùóª', 'ùó®ùóØùóºùóª', 'ùó°ùóüùóî']
            if word == str(record.get("student_fistName")): # ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏≠‡∏≤ array ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏õ‡πÄ‡∏ä‡πá‡∏Å‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
                firstName = word
                # print("student_fistName  " , word)
            if word == str(record.get("student_surName")): # ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏≠‡∏≤ array ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏õ‡πÄ‡∏ä‡πá‡∏Å‡∏Å‡∏±‡∏ö ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
                surName = word
                # print("student_surName  " , word)

    print("üî• ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏°‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ : ", firstName , "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ñ‡∏∑‡∏≠ : ", surName)

   


    check_again = []

    #  ['Vesussdidausssisy', 'The', 'Gunso', 'Aes', 'Intummade', 'Maliyam', 'Reiua']
    # üî• ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏°‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ :   ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ñ‡∏∑‡∏≠ :  Maliyam
    
    if firstName == "":
        print("üéôÔ∏èüéôÔ∏è", new_spilt_word_toFind_Name)
        record_firstName = list(myCollection.find({}, {"student_fistName": 1}))
        similarity_ratio = []
        for word in new_spilt_word_toFind_Name:
            for record in record_firstName:
                res = SequenceMatcher(None, word, record.get("student_fistName")).ratio()
                # print("res =", res)
                if res >= 0.85:
                    # print("word:", word, "record_fistName:", record.get("student_fistName"))
                    similarity_ratio.append(record.get("student_fistName"))
                    firstName = record.get("student_fistName")
                    print(res)
        print("üéôÔ∏èüéôÔ∏è Name : ",similarity_ratio)
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏£‡∏±‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà append  
        if len(similarity_ratio) != 0:
            # ‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡πá‡∏Å FistName ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢ percent ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ
            record = myCollection.find_one({"student_fistName": firstName}) # {'_id': ObjectId('65d59171f8d8e5ca03393c15'), 'id_number': '64070257', 'student_fistName': 'Intummadee', 'student_surName': 'Maliyam', 'attendance_status': 0}
            # print(record.get("student_surName"))
            if surName == "":
                check_again.append(record.get("student_surName"))
                check_again.append("surName")

        
    
    if surName == "":
        print("ü©¥ü©¥", new_spilt_word_toFind_Name)
        record_surName = list(myCollection.find({}, {"student_surName": 1}))
        similarity_ratio = []
        for word in new_spilt_word_toFind_Name:
            for record in record_surName:
                res = SequenceMatcher(None, word, record.get("student_surName")).ratio()
                # print("res =", res)
                if res >= 0.85:
                    # print("word:", word, "record_surName:", record.get("student_surName"))
                    similarity_ratio.append(record.get("student_surName"))
                    surName = record.get("student_surName")
                    print(res)
        print("ü©¥ü©¥ surName : ", similarity_ratio)
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏£‡∏±‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà append 
        if len(similarity_ratio) != 0:
            # ‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡πá‡∏Å SurName ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢ percent ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ
            record = myCollection.find_one({"student_surName": surName})
            print(record)
            if firstName == "":
                check_again.append(record.get("student_fistName"))
                check_again.append("firstName")

        
    

    print("üî• ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏°‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ : ", firstName , "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ñ‡∏∑‡∏≠ : ", surName)
    
   

    # ‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡πÅ‡∏Ñ‡πà ‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    if len(check_again) != 0: 
        print("üÉúüÉöüÉñüÉÅüÇ≠üÇ∫ ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à " , check_again[1] , " : " , check_again[0]) # üÉúüÉöüÉñüÉÅüÇ≠üÇ∫ ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à surName  :  Maliyam
        if check_again[1] == "firstName":
            return JsonResponse({'notSureIs': check_again[1], 'firstName': check_again[0] , 'surName' : surName})
        elif check_again[1] == "surName":
            return JsonResponse({'notSureIs': check_again[1], 'firstName': firstName , 'surName' : check_again[0]})
    
    
    if firstName != "" and surName != "" and len(check_again) == 0:
        # ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÜ‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
        return JsonResponse({'notSureIs': "Imsure", 'firstName': firstName , 'surName' : surName})

    # ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏±‡∏Å‡∏ï‡∏±‡∏ß ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÄ‡∏•‡∏¢‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà 
    else: # firstName == "" and surName == "":
        return JsonResponse({'notSureIs': "takeNewPhoto"})


def chageStatusAttendance(firstName , surName , isCome):
    # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏ß‡πà‡∏≤ ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡πÑ‡∏´‡∏°
    print("Àô‚úßÀñ¬∞üì∑ ‚ãÜÔΩ°ÀöÍ©ú  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á ", firstName , surName , " ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡πÑ‡∏´‡∏° = " , isCome)

    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)

    myDb = client["pymongo_demo"]
    myCollection = myDb["demo_collection"]

    if isCome == True:
        new_record = myCollection.update_one({"student_fistName": firstName, "student_surName": surName}, {"$set": {"attendance_status": 1}})
    elif isCome == False:
        new_record = myCollection.update_one({"student_fistName": firstName, "student_surName": surName}, {"$set": {"attendance_status": 0}})





def clearRecord():
    # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ clear ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)
    myDb = client["pymongo_demo"]
    myCollection = myDb["demo_collection"]
    result = myCollection.delete_many({})

    return ""

def add_image_to_pdf(pdf_filename, images):
    # ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏™‡∏£‡πâ‡∏≤‡∏á pdf ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    c = canvas.Canvas(pdf_filename, pagesize=letter)

    for image in images:
        c.drawImage(image, 0, 0, width=letter[0], height=letter[1])
        c.showPage()

    c.save()





# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏Ñ‡∏•‡∏¥‡πä‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà video
ix, iy = -1, -1
mode_Click = False
width, height = 640, 480  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ width ‡πÅ‡∏•‡∏∞ height
def click_photograph(event, x, y, flags, param):
    global ix, iy, drawing, mode_Click

    if event == cv2.EVENT_LBUTTONDOWN:
        if width-140 <= x <= width-10 and height-50 <= y <= height-10:
            # print("Capture Photo ‚ôõ‚ôõ")
            mode_Click = True



    

def VideoCapture(request):
# ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ ‡∏ü‡∏±‡∏ô‡∏ä‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏î‡∏¥‡πÇ‡∏≠ ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô fram video ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏Ñ‡∏•‡∏¥‡πä‡∏Å ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡∏¥‡∏î video ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏î esc
    global mode_Click  # Declare mode_Click as a global variable

    print("VideoCapture click üåøüåø" )
    cap = cv2.VideoCapture(0)
    cv2.namedWindow("CardCheck")
    cv2.setMouseCallback("CardCheck", click_photograph)
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á video
    
    firstName = "FirstName: "
    surName = "SurName: "
    statusCheck = ""
    color = (255, 0, 0)

    while(True):
        # Take each frame
        _, frame = cap.read()

        # Flip the frame (‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤) ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤ flip ‡∏†‡∏≤‡∏û‡∏õ‡∏ä‡∏ä.‡∏Å‡πá‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤‡∏ï‡∏≤‡∏° ‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‡∏à‡∏±‡∏ö text ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        # frame = cv2.flip(frame, 1)
        

        height, width, channels = frame.shape # height = 480 , width =  640
        # Draw a rectangle - top-left at (50,50), bottom-right at (200,200) , (0, 255, 0) = color in BGR format
        # cv2.rectangle(frame, (50, 50), (width-50, height-50), (0, 255, 0), 2)

        # ‚Å°‚Å£‚Å¢‚Å¢‚Äã‚Äå‚Äå‚Äç‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
        # Draw a rectangle ‡∏Å‡∏ß‡πâ‡∏≤‡∏á 130 ‡∏™‡∏π‡∏á 40
        cv2.rectangle(frame, (width-140, height-50), (width-10, height-10), (255, 255, 255), -1)
        cv2.putText(frame, "Capture Photo", (width-120, height-25), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1)
        cv2.putText(frame, f"{statusCheck}", (10, height-35), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
        cv2.putText(frame, f"{firstName} {surName}", (10, height-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, ), 1)


        # Display the resulting frame
        cv2.imshow('CardCheck', frame)

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô true ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏•‡∏¥‡πä‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° capture Photo
        if mode_Click == True:
            print("‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û ‡ºº „Å§ ‚óï_‚óï ‡ºΩ„Å§üç∞üçîüçï")
            
            cv2.imwrite('../assets/testImage.png', frame)
            
            text = check_text("../assets/testImage.png") # ‡πÄ‡∏ä‡πá‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            text = is_person_name(text)
            response_data = text.content.decode('utf-8')  # ‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô string
            data_dict = json.loads(response_data)  # ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô Python dictionary
            # JsonResponse({'notSureIs': check_again[1], 'firstName': firstName , 'surName' : surname})
            print(data_dict)
            

            #  ‡ºò‚ãÜüå∑ü´ßüê±üêæüíó ‚ãÜÀô 
            if data_dict.get("notSureIs") == "Imsure": # ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏°‡∏≤‡∏Å
                chageStatusAttendance(data_dict.get("firstName") , data_dict.get("surName") , True) # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö
                print(" # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö ")
                firstName = firstName + data_dict.get("firstName")
                surName = surName + data_dict.get("surName")
                statusCheck = "Pass"
                color = (0, 255 , 0)

                
            elif data_dict.get("notSureIs") == "takeNewPhoto": # takeNewPhoto ‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
                # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ = {'notSureIs': 'takeNewPhoto'}
                print(" # takeNewPhoto ‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà ")
                statusCheck = "Please take a new photo."
                color = (0, 0 , 255)

                
            else: # ‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏∂‡∏á 
                chageStatusAttendance(data_dict.get("firstName") , data_dict.get("surName") , True) # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö
                print("# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö")
                firstName = firstName + data_dict.get("firstName")
                surName = surName + data_dict.get("surName")
                statusCheck = "Pass"
                color = (0, 255 , 0)

                
            mode_Click = False




        if cv2.waitKey(5) & 0xFF == 27: # ‡∏Å‡∏î esc ‡πÄ‡∏û‡∏∑‡πà‡∏≠ stop video
            break

    # When everything done, release the capture
    cap.release()
    cv2.destroyAllWindows()

    

    #! frame = ‡∏†‡∏≤‡∏û‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏Å‡∏±‡∏ö Video ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß  ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥

    # save ‡∏†‡∏≤‡∏û 
    # cv2.imwrite('../assets/testImage.png', frame)
    # check_text('../assets/testImage.png')

    # Convert the frame to a base64 string
    # _, buffer = cv2.imencode('.jpg', frame)
    # frame_base64 = base64.b64encode(buffer).decode('utf-8')

    # Return the base64 string as part of the JSON response
    # return JsonResponse({'frame_base64': frame_base64})




def upload_excel(request):
# ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ user ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå excel ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å excel ‡πÄ‡∏Ç‡πâ‡∏≤ MongoDB
    if request.method == 'POST':
        excel_file = request.FILES.get('excel_file')
        if excel_file and excel_file.name.endswith('.xlsx'):
            
            data = pd.read_excel(excel_file) # Read data from Excel file into a DataFrame using pandas


            # ! ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° DB
            try:
                client = pymongo.MongoClient(conn_str)
                print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
            except Exception:
                print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)
            myDb = client["pymongo_demo"]
            myCollection = myDb["demo_collection"]
            
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠ ‡∏£‡∏´‡∏±‡∏™ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô
            column1 = data.iloc[:, 0].tolist()  # Extracting data from the first column
            column2 = data.iloc[:, 1].tolist()  # Extracting data from the second column
            column3 = data.iloc[:, 2].tolist()  # Extracting data from the third column
            
            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            for i in range(len(column1)):
                student_number = {
                    "id_number" : column1[i], # ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
                    "student_fistName": column2[i],
                    "student_surName" : column3[i],
                    "attendance_status" : 0, # 0 ‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö , 1 = ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                }
# student_number ‡πÄ‡∏ä‡πà‡∏ô {'id_number': 64070257, 'student_fistName': 'Intummadee', 'student_surName': 'Maliyam', 'attendance_status': 0}
                # TODO Insert the document
                res = myCollection.insert_one(student_number)                            
             

        


            




            return JsonResponse({'message': 'File uploaded successfully'})
        else:
            return JsonResponse({'error': 'Invalid file format. Please upload an Excel file.'}, status=400)
    else:
        return JsonResponse({'error': 'Invalid request method.'}, status=405)