from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader
from django.http import JsonResponse

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
from io import BytesIO
import base64

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ocr
from PIL import Image , ImageEnhance, ImageFilter
import pytesseract


# Computer Vision , OpenCV
import numpy as np
import matplotlib.pyplot as plt
import cv2

 
# MongoDB
from pymongo import MongoClient
import pymongo

# For Upload File
from django.shortcuts import render
from django.http import HttpResponse, JsonResponse
from django.core.files.storage import FileSystemStorage
import os
import fitz
 
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏•‡∏´‡∏î
import re
import linecache 
 
# üå∫ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞ return ‡πÑ‡∏£‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ HttpResponse

def testCardCheck(request):
    print("testCardCheck")
    return HttpResponse("Hello world!")

def cardCheck(request):
    # template = loader.get_template('HomePage.html')
    # return HttpResponse(template.render())
    return HttpResponse("Hello world!")

def VideoCapture(request):
    print("VideoCapture click üåøüåø" )
    cap = cv2.VideoCapture(0)
    while(True):
        # Take each frame
        _, frame = cap.read()
        

        height, width, channels = frame.shape # height = 480 , width =  640
        # Draw a rectangle - top-left at (50,50), bottom-right at (200,200) , (0, 255, 0) = color in BGR format
        # cv2.rectangle(frame, (50, 50), (width-50, height-50), (0, 255, 0), 2)

        # Display the resulting frame
        cv2.imshow('frame', frame)
        if cv2.waitKey(5) & 0xFF == 27: # ‡∏Å‡∏î esc ‡πÄ‡∏û‡∏∑‡πà‡∏≠ stop video
            break

    # When everything done, release the capture
    cap.release()
    cv2.destroyAllWindows()

    

    #! frame = ‡∏†‡∏≤‡∏û‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏Å‡∏±‡∏ö Video ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß  ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥

    # save ‡∏†‡∏≤‡∏û 
    cv2.imwrite('../assets/testImage.png', frame)
    check_text('../assets/test01gray.png')

    # Convert the frame to a base64 string
    _, buffer = cv2.imencode('.jpg', frame)
    frame_base64 = base64.b64encode(buffer).decode('utf-8')

    # Return the base64 string as part of the JSON response
    return JsonResponse({'frame_base64': frame_base64})


def MainPage(request): # http://127.0.0.1:8000/MainPage/
    print("Start HomePage.html üì¶üì¶")
    

    # check_text("../assets/img-1.png") # path ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Å image ‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô github
    # check_text("../../assets/test03gray.jpg") # path ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Å image ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏∂‡πâ‡∏ô githup
    # check_text_Thai_Language("../../assets/test03gray.jpg")   # ‡πÄ‡∏ä‡πá‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

    return render(request, 'MainPage.html', {
        # 'frame_base64': frame_base64,
    })


 
def createImageTable(request):
    #  ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞ ‡∏≠‡πà‡∏≤‡∏ô ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ
    
    conn_str = "mongodb+srv://kataroja1:kataroja7899@cluster0.0yrfv3l.mongodb.net/?retryWrites=true&w=majority"
    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)
    myDb = client["pymongo_demo"]
    myCollection = myDb["demo_collection"]
    
    # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© A4 (210 x 297 ‡∏°‡∏°.)
    # a4_width, a4_height = 210, 297
    a4_width, a4_height = 700, 800

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏Ç‡∏ô‡∏≤‡∏î A4
    image_a4 = np.ones((a4_height, a4_width, 3), dtype=np.uint8) * 255

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á #! ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ß‡∏Å‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏£‡∏≤‡πÉ‡∏™‡πà‡∏°‡∏∑‡∏≠‡πÑ‡∏õ 
    num_rows = 31
    num_cols = 4
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ num_rows = 20 and num_cols = 4  ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ==>  cell_width_distance = 52  , cell_height_distance = 14
    cell_width_distance = image_a4.shape[1] // num_cols + 8 # .shape[1] = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    cell_height_distance = image_a4.shape[0] // num_rows # .shape[0] = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    # image_a4.shape[1] = 210 , image_a4.shape[0] = 297

    #! Reading the document
    cursor = myCollection.find()
        
    for row in range(num_rows + 1):
        y = row * cell_height_distance # ‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö cell_height_distance ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ‡∏™‡∏≤‡∏° ‡∏Å‡πá‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç 3 ‡πÑ‡∏õ‡∏Ñ‡∏π‡∏ì ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏î‡πâ ‡πÅ‡∏ñ‡∏ß‡∏™‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        # print("row : ", row , "cell_height_distance : ", cell_height_distance , "y ü™Åü™Å: " , y)
        # row :  0 cell_height_distance :  14 y ü™Åü™Å:  0
        # row :  1 cell_height_distance :  14 y ü™Åü™Å:  14
        cv2.line(image_a4, (0, y), (image_a4.shape[1], y), (0, 0, 0), 1)

        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß
        # range(start, stop) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô range(num_cols + 1) ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á start‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏Ñ‡πà stop ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        if(row != 0): #‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏à‡∏∞‡πÉ‡∏™‡πà‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
            # for col in range(num_cols): # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏° = 4 
            #     x = col * cell_width_distance 
                
            try:
                record = cursor.next()
                record_id_number = record['id_number']
                record_student_fistName = record['student_fistName']
                record_student_surName = record['student_surName']
                record_attendance_status = record['attendance_status']
                # print("üåäüåä " , record_id_number)
            

                # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û
                cv2.putText(image_a4, record_id_number, (0+10, y+cell_height_distance-3), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 1, ) #* ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà (x,y) = (0, y+15) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏•‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å y = y +15 ‡∏™‡πà‡∏ß‡∏ô x = 0 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
                cv2.putText(image_a4, record_student_fistName, (cell_width_distance+10, y+cell_height_distance-3), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1,)
                cv2.putText(image_a4, record_student_surName, (cell_width_distance*2+10, y+cell_height_distance-3), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1, )
                #TODO cv2.putText(image_a4, record_attendance_status, (cell_width_distance*3+10, y+cell_height_distance+1), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1, )
                if(record_attendance_status == 0): # 0 = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö , 1 = ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö   #? ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á = 15 , ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á = 10
                    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó - ‡∏Ç‡∏≤‡∏î‡∏™‡∏≠‡∏ö ‚ùå
                    cv2.line(image_a4, (cell_width_distance*3+10,  y+cell_height_distance-5), (cell_width_distance*3+20, y+cell_height_distance-15), (0, 0, 255), 1, cv2.LINE_AA) 
                    cv2.line(image_a4, (cell_width_distance*3+10,  y+cell_height_distance-15), (cell_width_distance*3+20, y+cell_height_distance-5), (0, 0, 255), 1, cv2.LINE_AA)
                else:
                    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö ‚úÖ
                    cv2.line(image_a4, (cell_width_distance*3+10,  y+cell_height_distance-5), (cell_width_distance*3+20, y+cell_height_distance-15), (0, 255, 0), 1, cv2.LINE_AA)
                    cv2.line(image_a4, (cell_width_distance*3+10,  y+cell_height_distance-5), (cell_width_distance*3+7, y+cell_height_distance-8), (0, 255, 0), 1, cv2.LINE_AA)
            except StopIteration:
                # ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ , StopIteration ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Cursor ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                break

    title = ["id_number", "firstname" , "surname", "attendance"]
    for col in range(num_cols):
        x = col * cell_width_distance
        # print("col : ", col , "cell_width_distance : ", cell_width_distance , "x üçúüçú: " , x)
        # col :  0 cell_width_distance :  52 x üçúüçú:  0  
        # col :  1 cell_width_distance :  52 x üçúüçú:  52 #*‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°  x ‡∏à‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 52 or cell_width_distance
        cv2.line(image_a4, (x, 0), (x, image_a4.shape[0]), (0, 0, 0), 1)

         
        #? ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        cv2.putText(image_a4, title[col], (x + 5, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
 

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© A4
    # scaled_image = cv2.resize(image_a4, (800, 900))  # 800 x 1131 ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    scaled_image = cv2.resize(image_a4, (a4_width, a4_height))  # 800 x 1131 ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•

    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
    cv2.imshow('A4 Size Image', scaled_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    return HttpResponse("Hello world!")



#! Mongo Tip Here!!!!!!
def MongoConnect(request):
    # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Mongo ‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á ‡∏≠‡πà‡∏≤‡∏ô ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï ‡∏•‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ query üíê
    conn_str = "mongodb+srv://kataroja1:<YourPassword>@cluster0.0yrfv3l.mongodb.net/?retryWrites=true&w=majority"

    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)


    # Create a DB
    myDb = client["pymongo_demo"]
    # Create a collection
    myCollection = myDb["demo_collection"]
    print(client.list_database_names())


    #!TODO Create a document / record
    # myDoc = {
    #     "name" : "Hello",
    #     "message": "This is pymongo demo"
    # }
    # # Insert the document
    # res = myCollection.insert_one(myDoc)
    # print(res.inserted_id)


    #! Reading the document ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà rocord ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    # record = myCollection.find_one()
    # print(record) # {'_id': ObjectId('65d36d1794d78286f54ccfcb'), 'name': 'Hello', 'message': 'This is pymongo demo'}

    #! Reading the document ‡∏≠‡πà‡∏≤‡∏ô all record
    # cursor = myCollection.find()
    # for record in cursor:
    #     print(record)

    #! Reading but Query by student_fistName
    # record = myCollection.find_one({"student_fistName": firstName}) 
    # print(record) # => {'_id': ObjectId('65d4ca7f93805c855c82da41'), 'id_number': '64070257', 'student_fistName': 'Intummadee', 'student_surName': 'Carbon', 'attendance_status': 0}

    #? Updating the record 
    # query = {
    #     "message":"This is pymongo demo"
    # }
    # new_val = {
    #     "$set": {"message":"Welcome to coding 101 with Steve"}
    # }
    # new_record = myCollection.update_one(query, new_val)
    # record = myCollection.find_one()
    # print(record) # {'_id': ObjectId('65d36d1794d78286f54ccfcb'), 'name': 'Hello', 'message': 'Welcome to coding 101 with Steve'}

    #? Update but query by student_fistName and set new value especially attendance_status
    # new_record = myCollection.update_one({"student_fistName": firstName}, {"$set": {"attendance_status": 1}})

    #* Step 9: Delete the Record
    # query_del = {
    #     "name": "Hello"
    # }
    # record_del = myCollection.delete_one(query_del)
    # #Reading the document after updating
    # record = myCollection.find_one()
    # print(record)


    return ""

#* PDF
def upload_and_convert_pdf(request):
    print("‡πÄ‡∏Ç‡πâ‡∏≤ upload_and_convert_pdf")
    if request.method == 'POST' and request.FILES['pdf_file']: # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
        # Handle the uploaded PDF file
        uploaded_file = request.FILES['pdf_file'] #  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤.
        fs = FileSystemStorage() # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå FileSystemStorage ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Django.
        pdf_filename = fs.save(uploaded_file.name, uploaded_file) # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Django ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å.
        # print(pdf_filename) => resume.pdf

        # Convert PDF to images 
        #  fs.location ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô settings.py ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÅ‡∏õ‡∏£‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ MEDIA_ROOT ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ fs.location ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ
        pdf_path = os.path.join(fs.location, pdf_filename) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF.
        # print("pdf_path = " + pdf_path) => C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\media\test2.pdf ‡πÄ‡∏£‡∏≤‡πÉ‡∏™‡πà pdf ‡∏ä‡∏∑‡πà‡∏≠ test2.pdf ‡∏°‡∏≤
        image_paths = convert_pdf_to_images(pdf_path) # ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û.
        # print(image_paths) =>  ['page_1.png', 'page_2.png'] pdf‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ path‡∏Å‡πá‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡πÅ‡∏Ñ‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å
        
        # Save the first image as a PNG file
        if image_paths:

            first_page_image_path = image_paths[0]
            png_path = os.path.join(fs.location, 'output.png') 
            save_image_as_png(first_page_image_path, png_path)
            # check_text(first_page_image_path)

            page_png_path_url = [] # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö path ‡∏Ç‡∏≠‡∏á image ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á frontend ‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á frontend ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤ pdf 

            for i, page_image_path in enumerate(image_paths):
                # print(page_image_path) # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ ‡πÑ‡∏ü‡∏•‡∏∫ image ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ  , .pdf ‡∏°‡∏µ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏∞ print ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏™‡∏≠‡∏á‡∏£‡∏≠‡∏ö  page_1.png ‡πÅ‡∏•‡∏∞  page_2.png
                page_png_path = os.path.join(fs.location, f'page_{i + 1}.png')
                # page_png_path = print path ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡∏™‡∏≠‡∏á‡∏£‡∏≠‡∏ö ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .pdf ‡πÄ‡∏ä‡πà‡∏ô C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\media\page_2.png  ‡πÅ‡∏•‡∏∞   C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\media\page_1.png
                save_image_as_png(page_image_path, page_png_path) # ‡∏ñ‡πâ‡∏≤ pdf ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ ‡∏Å‡πá‡∏°‡∏≤‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° pdf ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ üöÄ

                page_png_path_url.append(fs.url(page_image_path))

                #* ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ä‡πá‡∏Å text ‡πÅ‡∏•‡πâ‡∏ß
                text = check_text(page_png_path)
                # print("text " , text)

                # conn_str = "mongodb+srv://kataroja1:<YourPassword>@cluster0.0yrfv3l.mongodb.net/?retryWrites=true&w=majority"
                # try:
                #     client = pymongo.MongoClient(conn_str)
                #     print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
                # except Exception:
                #     print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)

                # # Create a DB
                # myDb = client["pymongo_demo"]
                # # Create a collection
                # myCollection = myDb["demo_collection"]
                # print(client.list_database_names())


                print(text)
                #!! ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏™‡πà‡∏á ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
                lines = text.splitlines()
                for line in lines:
                    parts = line.split(' ', 1)
                    if len(parts) == 2:
                        number_part, text_part = parts
                        text_part = text_part.replace('-', '').replace('=', '').strip() 
                        subparts = text_part.split(' ', 1)
                        if len(subparts) == 2:
                            first_part, second_part = subparts
                            if '‚Äî' in second_part: # ‡πÅ‡∏Å‡πâ‡∏™‡πà‡∏ß‡∏ô second ‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ => 64070001 ‡∏ä‡∏∑‡πà‡∏≠ =  HarmonyHub ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• =  ‚Äî Tranquilwood (‡πÉ‡∏ô‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô second_part ‡∏°‡∏µ ‚Äî ‡∏ï‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏•‡∏¢‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å)
                                second_part = second_part.split('‚Äî', 1)[1].strip()
                            print(number_part, "‡∏ä‡∏∑‡πà‡∏≠ = ", first_part, "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• = ", second_part)
                    student_number = {
                        "id_number" : number_part, # ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
                        "student_fistName": first_part,
                        "student_surName" : second_part,
                        "attendance_status" : 0, # 0 ‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö , 1 = ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                    }
                    #TODO Insert the document
                    # res = myCollection.insert_one(student_number)
                    # print(res.inserted_id)

                    # print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏®.‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• => " , student_number) ==> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏®.‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =>  {'id_number': '64070254', 'student_fistName': 'Anchisa', 'student_surName': 'Cherdsattayanukul', 'attendance_status': 0}
                    # print(student_number)
            
            return JsonResponse({'page_png_path_url': page_png_path_url}) # page_png_path_url = [ /media/page_1.png ,  /media/page_2.png ]
        return JsonResponse({'error': 'Invalid request'}, status=400)

def convert_pdf_to_images(pdf_path):
    images = []
    doc = fitz.open(pdf_path)
    
    for page_number in range(doc.page_count):
        page = doc[page_number]
        pix = page.get_pixmap()
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        img_path = f'page_{page_number + 1}.png'
        img.save(img_path)
        images.append(img_path)
    
    return images

def save_image_as_png(source_path, destination_path):
    img = Image.open(source_path)
    img.save(destination_path, 'PNG')


#* ‡∏†‡∏≤‡∏û Image
def upload_image(request):
    if request.method == 'POST' and request.FILES.get('image_file'):
        uploaded_image = request.FILES['image_file']
        fs = FileSystemStorage()
        image_filename = fs.save(uploaded_image.name, uploaded_image)
        # print(image_filename) ==> Database.png ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        image_path = os.path.join(fs.location, image_filename) 
        # print("image_path = " + image_path) => C:\Users\User\Documents\Git_ComVi\CardCheck\my_tennis_club\media\74b05-16299573593572-800.avif
        if image_path:
            saveImage_path = os.path.join(fs.location, 'outputImage.png') 
            save_image_as_png(image_path, saveImage_path)
            text = check_text(saveImage_path) # ‡πÄ‡∏ä‡πá‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

            #‚Å°‚Å£‚Å¢‚Å£TODO ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á pdf ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ pdf ‡∏à‡∏∞‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡πà image ‡πÑ‡∏°‡πà‡∏°‡∏µ‚Å°
            # -‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÅ‡∏Å‡πâ VideoCapture ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ 
            
            print(text)
            




            saveImage_url = fs.url('outputImage.png') 
            return JsonResponse({'saveImage_url': saveImage_url})
        return JsonResponse({'error': 'Invalid request'}, status=400)

def check_text(image_path):
    print("Check ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ English üåèüåèüåèüåè")
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
    
    # image_path = '../assets/' + Image_name
    image = cv2.imread(image_path)
    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ pytesseract ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ OCR

    if image is not None:
        # path ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ ‡∏ó‡∏î‡∏•‡∏≠‡∏á
        #! cv2.imwrite('../assets/testImage_Here.png', img)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô Grayscale ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ pytesseract.
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (3,3), 0)
        thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

        # Perform text extraction
        data = pytesseract.image_to_string(thresh, lang='eng')
        print(data)
        print("------------ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Å ------------")    

    return data

def check_text_Thai_Language(image_path):
    print("Check ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Thailand üáπüá≠ üáπüá≠ ‚ãÜÔΩ°Àö ‚úàÔ∏é ‚úàÔ∏è ‚ãÜ")
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
    image = cv2.imread(image_path)
    # print(image)
    if image is not None:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (3,3), 0)
        thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

        # Perform text extraction
        text = pytesseract.image_to_string(thresh, lang='tha')  #Specify language to look after!
        # --psm 6 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á Sparse text. Tesseract ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏ö ‡πÜ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        print(text)

    return text

def checkStudentCome(text):
    # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô check_text
    # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà user ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ‡∏°‡∏≤ ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤ ‡∏Å‡∏£‡∏≠‡∏á ‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏®.‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡πÉ‡∏ô MongoDB ‡∏ß‡πà‡∏≤ ‡∏ô‡∏®. ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    conn_str = "mongodb+srv://kataroja1:<YourPassword>@cluster0.0yrfv3l.mongodb.net/?retryWrites=true&w=majority"
    print(" ---- uploadMongoDB ‚õ±Ô∏è‚õ±Ô∏è‚õ±Ô∏è ---- ")
    
    lines = text.splitlines()
    # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 6
    if len(lines) >= 7:
        line_6_words = lines[5].split()  # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 6 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠
        line_7_words = lines[6].split()  # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 7 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
        if line_6_words:
            firstName = line_6_words[-1]
            print("‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ ‚Ä¢·¥ó‚Ä¢ :", firstName) # Intummadee
        if line_7_words:
            surName = line_7_words[-1]
            print("‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ (> <) :", surName) # Maliyam


    try:
        client = pymongo.MongoClient(conn_str)
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏≤ ‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è‚öõÔ∏è")
    except Exception:
        print("‡πÄ‡∏ó‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠Mongo ‡πÄ‡∏Å‡∏¥‡∏î Error = " + Exception)

    myDb = client["pymongo_demo"]
    myCollection = myDb["demo_collection"]
    
    #? Updating the record 
    new_record = myCollection.update_one({"student_fistName": firstName}, {"$set": {"attendance_status": 1}})
    record = myCollection.find_one({"student_fistName": firstName})
    print("üçèüçè record ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
    print(record) # {'_id': ObjectId('65d36d1794d78286f54ccfcb'), 'name': 'Hello', 'message': 'Welcome to coding 101 with Steve'}

   
    


    return ""

